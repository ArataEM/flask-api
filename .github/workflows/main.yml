---
name: CI-CD-Workflow

on:
  pull_request:
    branches: [master]
  push:
    branches: [ci-cd]
  workflow_dispatch:

env:
  REGISTRY: arataem/flask-api

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:

      - name: Git Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # - name: Set up Python environment
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: "3.8"

      # - name: flake8 Lint
      #   uses: py-actions/flake8@v2


  build_and_push:
    runs-on: ubuntu-latest
    name: Build and push docker image
    needs: lint
    outputs:
      commit_hash: ${{ steps.commit_hash.outputs.commit_hash }}
    steps:

      - name: Git Checkout
        uses: actions/checkout@v3
      
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_FLASK_APP: "api.py"
          envkey_FLASK_ENVIRONMENT: "development"
          fail_on_empty: false

      - name: Set commit hash
        id: commit_hash
        run: echo "::set-output name=commit_hash::${GITHUB_SHA::7}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}:${{ steps.commit_hash.outputs.commit_hash }}


  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: build_and_push
    strategy:
      matrix:
        host: [3.64.228.99, 54.93.221.112]
    env:
      USERNAME: ubuntu
      DB_NAME: student
    steps:

      - name: Git Checkout
        uses: actions/checkout@v3

      - name: Deploy to EC2 instanse via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ matrix.host }}
          username: ${{ env.USERNAME }}
          key: ${{ secrets.KEY }}
          envs: ${{ secrets.DOCKER_USER }}, ${{ secrets.DOCKERHUB_TOKEN }}
          port: 22
          script: |
            # login docker
            docker login -u $DOCKER_USER -p $DOCKERHUB_TOKEN

            # cleanup
            docker stop flask-api
            docker rm flask-api

            # Run a new container from a new image
            docker run -d \
            --name flask-api \
            --restart always \
            -p 5000:5000 \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_HOSTNAME=${{ secrets.DB_HOSTNAME }} \
            -e DB_NAME=${{ env.DB_NAME }} \
            ${{ env.REGISTRY }}:${{ needs.build_and_push.outputs.commit_hash }}
